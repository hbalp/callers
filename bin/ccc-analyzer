#!/bin/bash
#set -x

#$include "shared-utilities"
#$include /tools/llvm/trunk/tools/clang/tools/extra/callers/bin/shared-utilities

function exit_script()
{
    lastArg=${!#}
    args=$@
    echo "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
    echo "ccc-analyzer: last provided argument is ${lastArg} while expecting a filename, so we exit without executing any callers analysis"
    echo "ignored arguments are: $@"
    echo "WARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWAR"
    #exit 255
    exit 0
}

# check whether the argument is present in input arguments of the script
function has_arg()
{
    arg=$1
    shift 1
    args=$@
    echo "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"
    echo "arg: ${arg}"
    echo "args: ${args}"
    for a in $args
    do
	echo "check whether ${arg} == ${a}:"
	if [ ${arg} == ${a} ]
	then
	    echo "YES"
	    return 0
	fi
    done
    echo "NO"
    return 1
}

function is_option()
{
    id=$1
    if [ ${id:0:1} == "-" ]
    then
	#echo "id: ${id} is an option"
	return 0
    else
	#echo "id: ${id} is not an option"
	return 1
    fi
}

function has_extension()
{
    file=$1
    ext=$2
    bname=`basename $file`
    fname=`basename $bname $ext`
    if [ $fname == $bname ]
    then
	#echo "ext of file ${file} is not ${ext}"
	return 1
    else
	#echo "ext of file ${file} is ${ext}"
	return 0
    fi
}

function get_file()
{
    file_ext=$1
    shift 1
    args=$@
    #echo "file_ext: ${file_ext}"
    #echo "args: ${args}"
    for a in $args
    do
	#echo "check whether ${a} is an option:"
	is_option ${a}
	is_opt=$?

	if [ $is_opt -eq 1 ]
	then
	    #echo "check whether ${a} is a file with ext=${file_ext}:"
	    has_extension ${a} ${file_ext}
	    has_ext=$?
	    if [ $has_ext -eq 0 ]
	    then
	        #echo "file of ext ${file_ext} is ${a}"
		echo "${a}"
		return 0
	    fi
	fi
    done
    #echo "No file of ext ${file_ext} has been found in $@"
    return 1
}

function build_conftest()
{
    file=${!#}
    args=$@
    #echo "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
    #cp conftest.c /tmp/conftest.c
    #ccc-analyzer -E /tmp/conftest.c
    echo "ccc-analyzer: conftest.c is part of the provided argument, so we compile it without analysis"
    echo "pwd: ${PWD}"
    #echo "CXX=${CXX} $@"
    #echo "gcc $@"
    gcc "$@"
    #clang "$@"
    #$CXX "$@"
    echo "CONFTESTCONFTESTCONFTESTCONFTESTCONFTESTCONFTESTCONFTESTCONFTESTCONFTESTCONFTEST"
    exit 0
}

function check_ld()
{
    lastArg=${!#}
    args=$@
    echo "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
    echo "ccc-analyzer: last provided argument is ${lastArg}, so we provide a dummy ld"
    echo "ld: $@"
    export LD=/usr/bin/ld
    echo "LDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLD"
    exit 0
}

function check_args()
{
    has_arg "conftest.c" $@
    has_conftest=$?
    echo "HBDBG has conftest ($@) ? : $has_conftest"

    lastArg=${!#}

    if
	[ $has_conftest -eq 0 ]
    then
	echo "HBDBG: it seems that conftest.c is part of $@"
	build_conftest $@
    elif
	[ $lastArg == "-print-prog-name=ld" ]
    then
	check_ld $@
    elif
	[ $lastArg == "-V" ]||
	[ $lastArg == "-v" ]||
	[ $lastArg == "-qversion" ]
    then
	exit_script $@
    fi
}

# check expected arguments
#check_args $@
#lastArg=${!#}

echo "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
# get the absolute path to the first file to be analyzed
#file=$lastArg
build_args=$@
#analysis_args=echo "${build_args}" | sed -e s/\\.o/\.gen\.callers\.unsorted\.out/g
analysis_args=$@
echo "ccc-analyzer arguments are: $@"

file=`get_file .c ${analysis_args}`

if [ -z "${file}" ]
then
    echo "No .c source file has been found in arguments, so we bypass the callers analysis"
    exit_script ${analysis_args}
fi

bfile=`basename $file`

if [ ${bfile} == "conftest.c" ]
then
    build_conftest ${analysis_args}
fi

echo "c_file: ${file}"

# localize clang
clang=`which clang`

# get build options
build_options=${build_args}

# build the source file to enable link edition and to be sure output directories are well created 
${clang} ${build_options}

# retrieve the system include files required by clang
system_includes=`strace -f -e verbose=all -s 256 -v ${clang} $file |& grep execve |& grep "bin/clang" |& grep cc1 |& sed -e s/'"-internal-isystem", "'/'-I"'/g|& sed -e s/'"-internal-externc-isystem", "'/'-I"'/g |& sed -e s/", "/"\n"/g |& grep "\-I\"" | sed -e s/\"//g | awk '{print}' ORS=' ' `
# get path
path=`pwd`

# define callers analysis options
callers_analysis_options=`echo ${build_options} | sed -e s/-c\ //g | sed -e s/\\\\.o/\.callers.unsorted.out/g`
#callers_analysis_options=`echo ${build_options} | sed -e s/-c\ //g | sed -e s/\\\\.o/\.out\ /g | sed -e s#${file}#${path}/${file}#g `
#| sed -e s#-o\ CMakeFiles[^\ ]*/#-o\ callers-analysis-report/dot/unsorted/#g >> $callers_launch_script

# localize callers
callers=`which callers`

# add some options when required
callers_options="-s /tmp/defined_symbols.json"

# build the callers analysis command    
analysis="${callers} ${callers_options} ${system_includes} ${callers_analysis_options}"

cd $path
echo "launch callers analysis..."
echo "${analysis}" | tee .tmp.last.callers.analysis.sh
source .tmp.last.callers.analysis.sh
#exec "${analysis}"
#exec "cd ${path} && ${analysis}"

echo "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
