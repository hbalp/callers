#+AUTHOR: Hugues Balp
#+DATE: [2015-10-22 jeu.]
#+TITLE: 
#+COMMENT: OH: what is important is the analysis process
#+COMMENT: OH: show the genericity of the approach

* DONE Problem: how to build a consistent and pertinent model abstraction of legacy code ? :problem:
   - There are *many possible mappings* from the same source code base
   - *Need to find the good* one that matches the *user goals* and  also the *product line policy*
   - This is *possible only with some level of interaction with the end-user*  
** Is it possible to automate the architecture extraction ?
   Only if the tool is able to interact with the end-user
* DONE Proposed solution: generate user-configured component models from code :basic:idea:
  The basic idea is to offer an open-source, modular and customizable tooled-up process 
  for generating user-centered component views and models from source code.
** Proof of concept							:PoC:
  - Proof of concept proposed in 2014 with the FCCM prototype, for C only
  - Possibility to rewrite it for analyzing C++, with the help of clang (2015-16)
* DONE Comparison with concurrent tools				:competitors:
  Concurrent tools are able either to:

  1. extract low-level models from source code, without abstraction capability
     example tools: Rhapsody UML, doxygen etc... (one to one mapping)

  2. produce some proprietary abstracted views with the help of the end-user
     (the resulting views are not importable within external modellers for further model refactoring)
     example tools: Structure101, Lattix or Understand

  But they are not able to provide both modelling extraction from source code and abstraction capability.

  This is precisely the heart of the technology we offer, which targets the capability
  to generate directly reusable and end-user focused abstract models from source code.
     
* DONE Key differentiators & innovation			 :key:differentiator:

  1. *capability to generate domain-specific models from source code*
     
  2. *agile and goal-oriented model abstraction process from source code*
     => capability to generate customizable and reusable abstract views from source code
     
  3. *robust* and *scalable* source code analysis solution for large-scale software
     => it relies on a mature and up-to-date open-source compiler: *clang/LLVM*
     
* DONE Areas of Application				       :applications:
  1. _global or focused understanding of complex software_
  2. _architecture extraction and rearchitecting of legacy software_
     => customer-guided architecture view extraction from source code (datamodel, functions, components, )
     => rearchitecting at the model level, using a component modeller (like MelodyCCM)
  3. _component-based refactoring of legacy software_
     => introduction of the new architecture by code generation with MyCCM-NG
     => then, incremental code migration and refactoring for each component
  4. _software security risks analysis_
     => detection of vulnerabilities during code analysis
     => extraction of attack vectors thanks to function call graphs analysis
* DONE User benefits					      :user:benefits:
  1. *Trustable model abstractions* of complexe software implementations
     the models extracted from the source code are *correct by construction*
  2. *Get the good abstraction at the right moment*
     Help the end-users to _focus on their current engineering objectives_
     _Hide all the other details_ of the existing solution.
     At the opposite, _capability to focus on very specific details_ when needed.
  3. *Open and user-extensible* source code analysis solution
     Analysis results are stored incrementally in a json customizable open-format
* DONE Current status						     :status:
** feasibility demonstrated in form of two complementary prototypes [2/2] :feasibility:

   1. [X] the *fccm* prototype able to _generate component architecture views from C source code (2014)_

      _key feature_: 
      - support an *iterative process* with the *end-user* to generate the appropriate architecture view
      - support of *modelling abstraction* with the *notion of granularity level* and the hability to mix them
      - able to extract the *datatypes*, *interfaces* and *component definitions* from the source code
      _limitations_:
      - only able to analyse *C source code*, no support for C++
      - strongly dependent of the hard-to-configure CEA Frama-C source code analysis framework
      - generate LwCCM standard descriptors importable into MelodyCCM
      _foreseen evolution_:
      - use clang/LLVM to remove the dependency to Frama-C and add support of C++

   2. [X] the *callers* prototype able to _generate function call graphs from C++ source code (2015)_

      _key feature_:
      - incremental storage of analysis results in json files with an open and customizable format
      - static link edition of all software artifacts to enable navigation and custom dependency analysis
      - is able to follow class inheritance trees and calls to virtual functions
      - is able to provide the inputs required by the *fccm* prototype for generating component views.

      _limitations_:
      - unix-native, does not yet support windows environments
      - no back-end yet to support generation of component view from the source code

      _foreseen evolution_:
      - rewrite the *fccm* prototype as an OCAML back-end of the *callers* plugin

** language support					   :language:support:
   1. support the analysis of _C code_
   2. known evolution plan to support _C++ code_
** modelling support					  :modelling:support:
   1. generation of MelodyCCM models (in two phases, through LwCCM descriptors)
   2. possibility to customize the user-expected component-model (LwCCM, UCM, SoftIMA etc...)
* DONE Foreseen extensions					 :extensions:
  1. possibility to *control the software refactoring process* with the help of:
     - the input source code base
     - a model of the software architecture before rearchitecting
     - a model of the software architecture after rearchitecting
  2. the principle of this tool is *extensible to other languages* than C and C++
  3. *Rewritting of FCCM* to *replace Frama-C by clang* (2016)
     - the CCM component extraction algorithms implemented in the FCCM prototype use the Frama-C generated AST as input
     - FCCM depends on Frama-C for getting the function call graphs
     - as Callers is also able to produce the function call graph, we can remove the dependency to Frama-C and use callers output instead

* DONE Detailed tool-up process [2/2]				    :process:
** DONE Process configuration: two main use cases		  :use:cases:
   The reverse process depends mainly on the user knowledge on the existing code and the refactoring objectives
   So there are mainly two use cases:
   - case 1: the *existing code is well known* and *some refactoring objectives are already formalized*
   - case 2: the *existing code is not well known* and the *initial refactoring objectives are not clearly formalized*

   Depending on the use case, the reverse engineering process may differ a little.
   Roughly, in case 1,  two steps could be sufficient: one *tooled-up reverse extraction step* followed by one *user manual validation step*;
   while several *incremental iterations* will be required in case 2, alternating automated reverse extraction steps with manual validation steps.

   In case 1, both the source code and the user mapping between the existing code and the expected components are required.
   In case 2, only one entry point is required initially: the legacy source code and its build system.
   In both cases however, the user has to verify, potentially modify and validate manually the concrete mapping generated by the component model extraction tool.

** DONE Step-by-step architecture view extraction process from source code :reverse:engineering:steps:

*** Case 1: the user code and expected component view are already known

  - step 1: _in this particular case, the user can formalize a structured mapping description of the targetted component view wrt the existing legacy software architecture_
     this mapping description should respect the format accepted as input of the model extraction tool

  - step 2: _the user can execute the component model extraction tool on the code with, or without additional options;_
     depending on its intentions in terms of focus and expected analysis granularity level 
     (function, classes, files, directories, sub-systems etc..).
     
     The tool analyses the source code according to the default or user options 
    and generates a description file describing the resulting mapping between the legacy software and its component view.

     The description file is structured either in *XML*, for the *fccm* frama-C plugin, or in *json*, for the *callers* clang plugin.

  - step 3: _the user verifies manually the generated component view wrt to its knowledge & expectations_
    He can check the newly defined components wrt some user-defined quality criteria, like the ones proposed by TOSA.

  - step 4 (optional): _the user can modify the generated mapping description in case it does not exactly matches its intention_
    
    Currently the edition is performed manually directly in the mapping descriptor file.
    However it could be supported in the future by a DSL modeller like Sirius.

  - step 5: _the user validates the final mapping description_

*** Case 2: the user code and expected component view are not well known in advance

    In this scenario, the process is quite the same except the absence of an initial user mapping description (no step 1)
    and the fact that steps 2, 3 and 4 can be reexecuted several times in an iterative fashion in order for the end-user
    to incrementally refine the mapping description, according to its evolving understanding of the analyzed software,
    until the resulting component view statisfies his current modelling goals.

    We recall here that depending on the end-user modelling goals, the resulting models can significantly differ from the
    same code base from one goal to another (refer to the areas of application section to get an example list of modelling goals).
