#+AUTHOR: Hugues Balp
#+DATE: [2015-10-22 jeu.]
#+TITLE: 
#+COMMENT: OH: what is important is the analysis process
#+COMMENT: OH: show the genericity of the approach

* DONE Basic idea						 :basic:idea:
  Offer an open-source modular and customizable tooled-up process 
  for generating abstract user-centered models from source code
* DONE Key differentiators & innovation			 :key:differentiator:
  1. *capability to generate domain-specific models from source code*
     
  2. *agile and goal-oriented model abstraction process from source code*
     => capability to generate customizable and reusable abstract views from source code
     
  3. *robust* and *scalable* source code analysis solution for large-scale software
     => it relies on a mature and up-to-date open-source compiler: *clang/LLVM*
     => 
     
* DONE Areas of Application				       :applications:
  1. _global or focused understanding of complex software_
  2. _architecture extraction and refactoring of legacy software_
     => customer-guided architecture view extraction from source code (datamodel, functions, components, )
  3. _software security risks analysis_
     => detection of vulnerabilities and extraction of attack vectors

* DONE User benefits					      :user:benefits:
  1. *Trustable model abstractions* of complexe software implementations
     the models extracted from the source code are *correct by construction*
  2. *Get the good abstraction at the right moment*
     Help the end-users to _focus on their current engineering objectives_
     _Hide all the other details_ of the existing solution.
  3. *Open and user-extensible* source code analysis solution
     Analysis results are stored incrementally in a json customizable open-format
* DONE Comparison with concurrent tools				:competitors:
  Concurrent tools are able either to:

  1. extract low-level models from source code, without abstraction capability
     example tools: Rhapsody UML, doxygen etc... (one to one mapping)

  2. produce some proprietary abstracted views with the help of the end-user
     those views are not importable within modellers for further model refactoring
     example tools: Structure101, Lattix or Understand

  But they are not able to generate directly reusable abstract models from source code.
  This is precisely the heart of the technology we offer.
     
* TODO Current status						     :status:
** feasibility demonstrated in form of two complementary prototypes :feasibility:
   1. the *fccm* prototype able to _generate component architecture views from C source code (2014)_
      limitations:
      - 
      - 
   2. the *callers* prototype able to _ (2015)_
      limitations:
      - unix-native, does not yet support windows environments
      - 
** support the analysis of C and C++ languages		   :language:support:
** 
* DONE Foreseen extensions					 :extensions:
  1. possibility to *control the software refactoring process* with the help of:
     - the input source code base
     - a model of the software architecture before rearchitecting
     - a model of the software architecture after rearchitecting
  2. the principle of this tool is *extensible to other languages* than C and C++

* TODO Detailed tool-up process					    :process:
** architecture view extraction process				      :steps:
** 

