#+AUTHOR Hugues Balp
#+TITLE The Callers plug-in

* TODO The Callers plug-in [2/7]				    :callers:
  :PROPERTIES:
  :author:   Hugues Balp
  :partner:  Thales Communications & Security
  :version:  0.1
  :END:
** Header
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
#+AUTHOR Hugues Balp
#+TITLE The Callers plug-in
The Callers plug-in
   #+END_SRC
** DONE Introduction/Executive Summary [1/1]
   - [X] Introduce the plugin
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
   Callers is a static analysis plugin extending the clang/LLVM compilation framework for enabling early syntactic-based security analysis on large-scale C/C++ software.
   #+END_SRC
** DONE Aims [1/1]
   - [X] Describe the objectives of the plug-in and its relation with the security analysis of source code (what security properties are analysed)   
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* Aim
   The initial goal of the Callers plugin is to enable early security risks assessments based on the analysis of function calls dependencies.

   This plugin is extensible and it could also be completed in the future to support other types of dependencies like:
   - data type dependencies (inheritence, composition...)
   - control-flow dependencies (behavioral analysis based on sequence diagram generation)
   - use of shared variables
   - use of vulnerable system calls (related to specific CVEs)

   The main idea behind the Callers plugin is to perform some kind of global static link edition of the whole software
   in order to be able to capture all the possible execution paths of the software and the different usage contexts of each function.

   Based on this information, the tool can generate different instances of function callgraphs, depending on the end-user analysis focus.
   Those callgraphs can then been further exploited to enable the verification of some global security properties on the software.
   #+END_SRC
** TODO Functioning and user interface [0/1]
   - [ ] Describe the main functions of the plug-in and its user interface, if any.
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* Functioning and user interface
   TBC
   Function call dependencies can be analyzed at different granularity levels (function, file, directory, libraries, application).
   #+END_SRC
** TODO Implementation [0/4]
   Describe the internals of the plug-in
*** TODO architecture of the plugin
*** TODO big pictures [/]
**** big picture of clang, callers and frama-C++ plugins		:all:
    #+BEGIN_SRC dot :tangle callers.frama-c++.launcher.gen.dot
digraph "Integration of Frama-C++ and Callers into the Clang/LLVM build & analysis process"
{
// title
labelloc="b"
label="Integration of Frama-C++ and Callers into the Clang/LLVM build & analysis process"

"scan-build" [ label="clang scan-build" ]
"scan-callers" [ label="STANCE scan-callers\nbash script", color=green ]
"cmake-callers" [ label="STANCE cmake-callers\nbash script", color=green ]
"scan-callers" -> "scan-build" [ label="extends", color=green ]
"scan-callers" -> "build commands" [ dir=back, color=green ]

// user build
"user build" [ label="custom build\n(autoconf, cmake..)" ]
"build commands" [ label="build commands", shape=box ]
"user build" -> "build commands"

// scan build
"scan-build" -> "user build"
"scan-build" -> "build commands" [ dir=back ]

// compilation
"object code" [ shape="box" ]

// c compilation
"c code" [ label="C code", shape="box" ]
"c compiler" [ label="C compiler\n(gcc, clang..)" ]
"build commands" -> "c compiler"
"c compiler" -> "c code" [ dir=back ]
"c compiler" -> "object code"

// c++ compilation
"cpp code" [ label="C++ code", shape="box" ]
"cpp compiler" [ label="C++ compiler\n(g++,clang++..)" ]
"build commands" -> "cpp compiler"
"cpp compiler" -> "cpp code" [ dir=back ]
"cpp compiler" -> "object code"

// cmake build
"cmake-callers" -> "cmake build" [ color=green ]
"compile_commands" [ label="compile_commands.json", shape=box ]
"cmake build" -> "cpp compiler"
"cmake build" -> "c compiler"
"cmake build" -> "compile_commands"

"cmake-callers" -> "compile_commands" [ dir=back, color=green ]

// cmake callers analysis
"cmake-callers" -> "callers frontend" [ color=green ]
"cmake-callers" -> "callers++ frontend" [ color=green ]

// clang compilation
"clang object code" [ label="Clang/LLVM object code", shape="box" ]
"llvm" [ label="LLVM" ]
//"llvm" [ label="LLVM Optimizer\n& Code Generator" ]
"llvm" -> "clang object code"

// clang compilation of C code
"clang compiler" [ label="Clang compiler" ]
"clang AST" [ shape=box ]
"scan-build" -> "clang compiler"
"clang frontend" [ label="Clang frontend" ]
"clang frontend" -> "c code" [ dir=back ]
//"clang frontend" -> "clang AST"
"clang AST" -> "clang frontend" [ dir=back ]
"clang compiler" -> "clang frontend"
"clang compiler" -> "clang AST"  [ dir=back ]
"clang compiler" -> "llvm"

// clang++ compilation of C++ code
"clang++ compiler" [ label="Clang++ compiler" ]
"scan-build" -> "clang++ compiler"
"clang++ frontend" [ label="Clang++ frontend" ]
"clang++ frontend" -> "cpp code" [ dir=back ]
"clang AST" -> "clang++ frontend" [ dir=back ]
"clang++ compiler" -> "clang++ frontend"
"clang++ compiler" -> "clang AST"  [ dir=back ]
"clang++ compiler" -> "llvm"

// clang analysis
"clang analysis results" [ shape="box" ]
"scan-build" -> "clang static analyzer"
"clang static analyzer" -> "clang checkers"
"clang checkers" -> "clang analysis results"
"clang checkers" -> "clang AST" [ dir=back ]

// clang C code analysis
"clang static analyzer" -> "clang frontend"

// clang C++ code analysis
"clang static analyzer" -> "clang++ frontend"

// callers analysis
"metadata json file" [ label="Callers metadata\njson files" ]
"metadata json file" [ shape="box", color=green ]

// callers C code analysis
"callers frontend" [ color=green, label="Callers frontend\n(C++)" ]
"callers frontend" -> "clang frontend" [ color=green ]
"callers frontend" -> "clang AST" [ dir=back, color=green ]
"callers frontend" -> "metadata json file" [ color=green ]

// callers C++ code analysis
"callers++ frontend" [ color=green, label="Callers++ frontend\n(C++)" ]
"callers++ frontend" -> "clang++ frontend" [ color=green ]
"callers++ frontend" -> "clang AST" [ dir=back, color=green ]
"callers++ frontend" -> "metadata json file" [ color=green ]

// callers backends
"analysis goals" [ label="analysis goals", shape=box, color=green ]
"user config" [ label="user analysis\nbash script", shape=box, color=green ]
"analysis goals" -> "user config" [ style=dashed, label=manual, color=green ]
"analysis goals" -> "function callgraphs" [ style=dashed, label="manual", dir=back, color=green ]
"function callgraphs" [ label="function callgraphs\n.dot files", shape=box, color=green ]
"callers backends" [ label="Callers backends\n(OCAML)", color="green" ]
"metadata json file" -> "callers backends" [ color=green ]
"user config" -> "callers backends" [ color=green ]
"callers backends" -> "function callgraphs" [ color=green ]

// frama-c++
"scan-callers" -> "frama-c++" [ color=green ]
"frama-c++" [ label="frama-c++", color=blue ]
"frama-c++" -> "clang++ frontend" [ color=blue ]
"frama-c++" -> "framaCIRGen" [ color=blue ]
"frama-c++" -> "frama-clang" [ color=blue ]

// frama-clang analysis
//"scan-callers" -> "frama-clang"
"cmake-callers" -> "frama-clang" [ color=green ]
"frama-clang" [ label="frama-clang\n(OCAML)", color=blue ]
"framaCIRGen" [ label="framaCIRGen\n(C++)", color=blue ]
//"fir" [ label="Frama-C Intermediate\nRepresentation", shape=box ]
"fir" [ label="Frama-C IR", shape=box, color=blue ]
"cabs" [ label = "C Abstract", shape=box, color=blue ]
//"cil" [ label = "C Intermediate Language" ]
"cil" [ label = "CIL", shape=box ]

"clang AST" -> "framaCIRGen" [ color=blue ]
//"framaCIRGen" -> "fir"
"fir" -> "framaCIRGen" [ dir=back, color=blue ]
"fir" -> "frama-clang" [ color=blue ]
"frama-clang" -> "cabs" [ color=blue ]
//"cabs" -> "frama-clang" [ dir=back, color=blue ]
"cabs" -> "frama-c" [ color=blue ]
//"cabs" -> "frama-c" [ dir=back ]

// security analysis plugins
"scan-callers" -> "fc security plugins" [ color="blue" ]
"cmake-callers" -> "fc security plugins" [ color="blue" ]
"fc security plugins" [ label="STANCE frama-c\nsecurity plugins", color=blue ]
"fc security plugins" -> "VA results" [ dir=back, color=blue ]
"security analysis results" -> "fc security plugins" [ dir=back, color=blue ]

// frama-c value analysis
"VA results" [ shape=box ]
"VA" [ label="Value Analysis" ]
"VA results" [ label="VA results" ]
"VA" -> "frama-c" [ dir=back ]
//"VA" -> "VA results"
"VA results" -> "VA" [ dir=back ]
"VA" -> "cil" [ dir=back ]

// frama-c analysis
"pp C code" [ shape=box ]
"frama-c" [ label="frama-c" ]
"frama-c" -> "c code" [ dir=back ]
//"c code" -> "frama-c"
"cil" -> "frama-c"
"cil" -> "frama-c" [ dir=back ]
//"frama-c" -> "pretty-printed c code" [ label="print" ]
"frama-c" -> "pp C code" [ label="print" ]
//"frama-c" -> "c code" [ label="print" ]
}

// Local Variables:
// compile-command: "dot -Tpng callers.frama-c++.launcher.gen.dot > callers.frama-c++.launcher.gen.png"
// End:
 
   #+END_SRC
**** use of the Callers plugin with the cmake build  :analysis:callers:cmake:
    #+BEGIN_SRC dot :tangle callers.cmake.gen.dot
digraph "Use of the Callers plugin with the cmake build"
{
// title
labelloc="b"
label="Use of the Callers plugin with the cmake build"

"cmake-callers" [ label="STANCE cmake-callers\nbash script", color=blue ]

// compilation
"object code" [ shape="box" ]

// c compilation
"c code" [ label="C code", shape="box" ]
"c compiler" [ label="C compiler\n(gcc, clang..)" ]
"c compiler" -> "c code" [ dir=back ]
"c compiler" -> "object code"

// c++ compilation
"cpp code" [ label="C++ code", shape="box" ]
"cpp compiler" [ label="C++ compiler\n(g++,clang++..)" ]
"cpp compiler" -> "cpp code" [ dir=back ]
"cpp compiler" -> "object code"

// cmake build
"cmake-callers" -> "cmake build" [ color=blue ]
"compile_commands" [ label="compile_commands.json", shape=box ]
"cmake build" -> "cpp compiler"
"cmake build" -> "c compiler"
//"cmake build" -> "compile_commands"
"compile_commands" -> "cmake build" [ dir=back ]

"cmake-callers" -> "compile_commands" [ dir=back, color=blue ]

// cmake callers analysis
"cmake-callers" -> "callers frontend" [ color=blue ]
"cmake-callers" -> "callers++ frontend" [ color=blue ]

// clang compilation

// clang compilation of C code
"clang AST" [ shape=box ]
"clang frontend" [ label="Clang frontend" ]
"clang frontend" -> "c code" [ dir=back ]
"clang AST" -> "clang frontend" [ dir=back ]

// clang++ compilation of C++ code
"clang++ frontend" [ label="Clang++ frontend" ]
"clang++ frontend" -> "cpp code" [ dir=back ]
"clang AST" -> "clang++ frontend" [ dir=back ]

// callers analysis
"metadata json file" [ label="Callers metadata\njson files" ]
"metadata json file" [ shape="box", color=blue ]

// callers C code analysis
"callers frontend" [ color=blue, label="Callers frontend\n(C++)" ]
"callers frontend" -> "clang frontend" [ color=blue ]
"callers frontend" -> "clang AST" [ dir=back, color=blue ]
"callers frontend" -> "metadata json file" [ color=blue ]

// callers C++ code analysis
"callers++ frontend" [ color=blue, label="Callers++ frontend\n(C++)" ]
"callers++ frontend" [ color=blue ]
"callers++ frontend" -> "clang++ frontend" [ color=blue ]
"callers++ frontend" -> "clang AST" [ dir=back, color=blue ]
"callers++ frontend" -> "metadata json file" [ color=blue ]

// callers backends
"analysis goals" [ label="analysis goals", shape=box, color=blue ]
"user config" [ label="user analysis\nbash script", shape=box, color=blue ]
"analysis goals" -> "user config" [ style=dashed, label=manual, color=blue ]
"analysis goals" -> "function callgraphs" [ style=dashed, label="manual", dir=back, color=blue ]
"function callgraphs" [ label="function callgraphs\n.dot files", shape=box, color=blue ]
"callers backends" [ label="Callers backends\n(OCAML)", color="blue" ]
"metadata json file" -> "callers backends" [ color=blue ]
"user config" -> "callers backends" [ color=blue ]
"callers backends" -> "function callgraphs" [ color=blue ]

// frama-c++

// frama-clang analysis

// security analysis plugins

// frama-c value analysis

// frama-c analysis

}

// Local Variables:
// compile-command: "dot -Tpng callers.cmake.gen.dot > callers.cmake.gen.png"
// End:
   #+END_SRC
**** use of the Callers plugin with a custom build    :analysis:callers:scan:
    #+BEGIN_SRC dot :tangle callers.scan.gen.dot
digraph "scan-callers" 
{
// title
labelloc="b"
label="Use of the Callers plugin with a custom build"

"scan-build" [ label="clang scan-build" ]
"scan-callers" [ label="STANCE scan-callers\nbash script", color=blue ]
"scan-callers" -> "scan-build" [ label="extends", color=blue ]
"scan-callers" -> "callers frontend" [ color=blue ]
"scan-callers" -> "callers++ frontend" [ color=blue ]
"scan-callers" -> "build commands" [ dir=back, color=blue ]

// user build
"user build" [ label="custom build\n(autoconf, cmake..)" ]
"build commands" [ label="build commands", shape=box ]
"user build" -> "build commands"

// scan build
"scan-build" -> "user build"
"scan-build" -> "build commands" [ dir=back ]

// compilation
"object code" [ shape="box" ]

// c compilation
"c code" [ label="C code", shape="box" ]
"c compiler" [ label="C compiler\n(gcc, clang..)" ]
"build commands" -> "c compiler"
"c compiler" -> "c code" [ dir=back ]
"c compiler" -> "object code"

// c++ compilation
"cpp code" [ label="C++ code", shape="box" ]
"cpp compiler" [ label="C++ compiler\n(g++,clang++..)" ]
"build commands" -> "cpp compiler"
"cpp compiler" -> "cpp code" [ dir=back ]
"cpp compiler" -> "object code"

// cmake build

// cmake callers analysis

// clang compilation

// clang compilation of C code
"clang AST" [ shape=box ]
"clang frontend" [ label="Clang frontend" ]
"clang frontend" -> "c code" [ dir=back ]
//"clang frontend" -> "clang AST"
"clang AST" -> "clang frontend" [ dir=back ]

// clang++ compilation of C++ code
"clang++ frontend" [ label="Clang++ frontend" ]
"clang++ frontend" -> "cpp code" [ dir=back ]
"clang AST" -> "clang++ frontend" [ dir=back ]

// clang analysis

// clang C code analysis

// clang C++ code analysis

// callers analysis
"metadata json file" [ label="Callers metadata\njson files" ]
"metadata json file" [ shape="box", color=blue ]

// callers C code analysis
"callers frontend" [ color=blue, label="Callers frontend\n(C++)" ]
"callers frontend" -> "clang frontend" [ color=blue ]
"callers frontend" -> "clang AST" [ dir=back, color=blue ]
"callers frontend" -> "metadata json file" [ color=blue ]

// callers C++ code analysis
"callers++ frontend" [ color=blue, label="Callers frontend\n(C++)" ]
"callers++ frontend" -> "clang++ frontend" [ color=blue ]
"callers++ frontend" -> "clang AST" [ dir=back, color=blue ]
"callers++ frontend" -> "metadata json file" [ color=blue ]

// callers backends
"analysis goals" [ label="analysis goals", shape=box, color=blue ]
"user config" [ label="user analysis\nbash script", shape=box, color=blue ]
"analysis goals" -> "user config" [ style=dashed, label=manual, color=blue ]
"analysis goals" -> "function callgraphs" [ style=dashed, label="manual", dir=back, color=blue ]
"function callgraphs" [ label="function callgraphs\n.dot files", shape=box, color=blue ]
"callers backends" [ label="Callers backends\n(OCAML)", color="blue" ]
"metadata json file" -> "callers backends" [ color=blue ]
"user config" -> "callers backends" [ color=blue ]
"callers backends" -> "function callgraphs" [ color=blue ]

// frama-c++

// frama-clang analysis

// security analysis plugins

// frama-c value analysis

// frama-c analysis

}

// Local Variables:
// compile-command: "dot -Tpng callers.scan.gen.dot > callers.scan.gen.png"
// End:
 
   #+END_SRC
**** custom build process				       :build:custom:
    #+BEGIN_SRC dot :tangle build.custom.gen.dot
digraph "custom build " 
{
// title
labelloc="b"
label="user custom build process"

// user build
"user build" [ label="custom build\n(autoconf, cmake..)" ]
"build commands" [ label="build commands", shape=box ]
"user build" -> "build commands"

// compilation
"object code" [ shape="box" ]

// c compilation
"c code" [ label="C code", shape="box" ]
"c compiler" [ label="C compiler\n(gcc, clang..)" ]
"build commands" -> "c compiler"
"c compiler" -> "c code" [ dir=back ]
"c compiler" -> "object code"

// c++ compilation
"cpp code" [ label="C++ code", shape="box" ]
"cpp compiler" [ label="C++ compiler\n(g++,clang++..)" ]
"build commands" -> "cpp compiler"
"cpp compiler" -> "cpp code" [ dir=back ]
"cpp compiler" -> "object code"
}

// Local Variables:
// compile-command: "dot -Tpng build.custom.gen.dot > build.custom.gen.png"
// End:
 
   #+END_SRC
**** cmake-build process					:build:cmake:
    #+BEGIN_SRC dot :tangle build.cmake.gen.dot
digraph "cmake build" 
{
// title
labelloc="b"
label="cmake build process"

// compilation
"object code" [ shape="box" ]

// c compilation
"c code" [ label="C code", shape="box" ]
"c compiler" [ label="C compiler\n(gcc, clang..)" ]
"c compiler" -> "c code" [ dir=back ]
"c compiler" -> "object code"

// c++ compilation
"cpp code" [ label="C++ code", shape="box" ]
"cpp compiler" [ label="C++ compiler\n(g++,clang++..)" ]
"cpp compiler" -> "cpp code" [ dir=back ]
"cpp compiler" -> "object code"

// cmake build
"compile_commands" [ label="compile_commands.json", shape=box ]
"cmake build" -> "cpp compiler"
"cmake build" -> "c compiler"
"cmake build" -> "compile_commands"
}

// Local Variables:
// compile-command: "dot -Tpng build.cmake.gen.dot > build.cmake.gen.png"
// End:
 
   #+END_SRC
**** clang build process					:build:clang:
    #+BEGIN_SRC dot :tangle build.clang.gen.dot
digraph "clang build" 
{
// title
labelloc="b"
label="clang build process"

"scan-build" [ label="clang scan-build" ]

"c code" [ label="C code", shape="box" ]
"cpp code" [ label="C++ code", shape="box" ]

// clang compilation
"clang object code" [ label="object code", shape="box" ]
"llvm" [ label="LLVM" ]
//"llvm" [ label="LLVM Optimizer\n& Code Generator" ]
"llvm" -> "clang object code"

// clang compilation of C code
"clang compiler" [ label="Clang compiler" ]
"clang AST" [ shape=box ]
"scan-build" -> "clang compiler"
"clang frontend" [ label="Clang frontend" ]
"clang frontend" -> "c code" [ dir=back ]
//"clang frontend" -> "clang AST"
"clang AST" -> "clang frontend" [ dir=back ]
"clang compiler" -> "clang frontend"
"clang compiler" -> "clang AST"  [ dir=back ]
"clang compiler" -> "llvm"

// clang++ compilation of C++ code
"clang++ compiler" [ label="Clang++ compiler" ]
"scan-build" -> "clang++ compiler"
"clang++ frontend" [ label="Clang++ frontend" ]
"clang++ frontend" -> "cpp code" [ dir=back ]
"clang AST" -> "clang++ frontend" [ dir=back ]
"clang++ compiler" -> "clang++ frontend"
"clang++ compiler" -> "clang AST"  [ dir=back ]
"clang++ compiler" -> "llvm"
}

// Local Variables:
// compile-command: "dot -Tpng build.clang.gen.dot > build.clang.gen.png"
// End:
 
   #+END_SRC
**** clang analysis process				     :analysis:clang:
    #+BEGIN_SRC dot :tangle analysis.clang.gen.dot
digraph "clang analysis process" 
{
// title
labelloc="b"
label="clang analysis process"

"scan-build" [ label="clang scan-build" ]

// user build
"user build" [ label="custom build\n(autoconf, cmake..)" ]
"build commands" [ label="build commands", shape=box ]
"user build" -> "build commands"

// scan build
"scan-build" -> "user build"
"scan-build" -> "build commands" [ dir=back ]

// c compilation
"c code" [ label="C code", shape="box" ]

// c++ compilation
"cpp code" [ label="C++ code", shape="box" ]

// clang compilation of C code
"clang AST" [ shape=box ]
"clang frontend" [ label="Clang frontend" ]
"clang frontend" -> "c code" [ dir=back ]
//"clang frontend" -> "clang AST"
"clang AST" -> "clang frontend" [ dir=back ]

// clang++ compilation of C++ code
"clang++ frontend" [ label="Clang++ frontend" ]
"clang++ frontend" -> "cpp code" [ dir=back ]
"clang AST" -> "clang++ frontend" [ dir=back ]

// clang analysis
"analysis results" [ label="clang analysis results, " shape="box" ]
"scan-build" -> "clang static analyzer"
"clang static analyzer" -> "clang checkers"
"clang checkers" -> "analysis results"
"clang checkers" -> "clang AST" [ dir=back ]

// clang C code analysis
"clang static analyzer" -> "clang frontend"

// clang C++ code analysis
"clang static analyzer" -> "clang++ frontend"

// user analysis goals & config
"user config" -> "scan-build"
"analysis goals" [ label="analysis goals", shape=box ]
"user config" [ label="user config", shape=box ]
"analysis goals" -> "user config" [ style=dashed, label=manual ]
"analysis goals" -> "analysis results" [ style=dashed, label="manual", dir=back ]
}

// Local Variables:
// compile-command: "dot -Tpng analysis.clang.gen.dot > analysis.clang.gen.png"
// End:
 
   #+END_SRC
**** frama-c value analysis process		  :frama:c:VA:value:analysis:
    #+BEGIN_SRC dot :tangle analysis.frama-c.VA.gen.dot
digraph "Frama-C Value Analysis process"
{
// title
labelloc="b"
label="Frama-C Value Analysis process"

// frama-c value analysis
"VA results" [ shape=box ]
"VA" [ label="Value Analysis" ]
"VA results" [ label="VA results" ]
"VA" -> "frama-c" [ dir=back ]
//"VA" -> "VA results"
"VA results" -> "VA" [ dir=back ]
"VA" -> "cil" [ dir=back ]

// frama-c analysis
"c code" [ label="C code", shape="box" ]
"pp C code" [ shape=box ]
"frama-c" [ label="frama-c" ]
"frama-c" -> "c code" [ dir=back ]
//"c code" -> "frama-c"
"cil" -> "frama-c"
"cil" -> "frama-c" [ dir=back ]
//"frama-c" -> "pretty-printed c code" [ label="print" ]
"frama-c" -> "pp C code" [ label="print" ]
//"frama-c" -> "c code" [ label="print" ]

// user analysis goals & config
"analysis goals" [ label="analysis goals", shape=box ]
"user config" [ label="user config", shape=box ]
"analysis goals" -> "user config" [ style=dashed, label=manual ]
"user config" -> "frama-c"
"analysis goals" -> "VA results" [ style=dashed, label="manual", dir=back ]
}

// Local Variables:
// compile-command: "dot -Tpng analysis.frama-c.gen.dot > analysis.frama-c.gen.png"
// End:
 
   #+END_SRC
**** frama-c security analysis processes 	  :frama:c:VA:value:analysis:
    #+BEGIN_SRC dot :tangle analysis.frama-c.security.gen.dot
digraph "Frama-C Security Analysis processes"
{
// title
labelloc="b"
label="Frama-C Security Analysis processes"

// "scan-build" [ label="clang scan-build" ]
// "scan-callers" [ label="STANCE scan-callers\nbash script", color=blue ]
// "cmake-callers" [ label="STANCE cmake-callers\nbash script", color=blue ]
// "scan-callers" -> "scan-build" [ label="extends", color=blue ]
// "scan-callers" -> "build commands" [ dir=back, color=blue ]

// // user build
// "user build" [ label="custom build\n(autoconf, cmake..)" ]
// "build commands" [ label="build commands", shape=box ]
// "user build" -> "build commands"

// // scan build
// "scan-build" -> "user build"
// "scan-build" -> "build commands" [ dir=back ]

// // compilation
// "object code" [ shape="box" ]

// // c compilation

// "c compiler" [ label="C compiler\n(gcc, clang..)" ]
// "build commands" -> "c compiler"
// "c compiler" -> "c code" [ dir=back ]
// "c compiler" -> "object code"

// // c++ compilation
// "cpp code" [ label="C++ code", shape="box" ]
// "cpp compiler" [ label="C++ compiler\n(g++,clang++..)" ]
// "build commands" -> "cpp compiler"
// "cpp compiler" -> "cpp code" [ dir=back ]
// "cpp compiler" -> "object code"

// // cmake build
// "cmake-callers" -> "cmake build" [ color=blue ]
// "compile_commands" [ label="compile_commands.json", shape=box ]
// "cmake build" -> "cpp compiler"
// "cmake build" -> "c compiler"
// "cmake build" -> "compile_commands"

// "cmake-callers" -> "compile_commands" [ dir=back, color=blue ]

// // cmake callers analysis
// "cmake-callers" -> "callers frontend" [ color=blue ]
// "cmake-callers" -> "callers++ frontend" [ color=blue ]

// // clang compilation
// "clang object code" [ label="Clang/LLVM object code", shape="box" ]
// "llvm" [ label="LLVM" ]
// //"llvm" [ label="LLVM Optimizer\n& Code Generator" ]
// "llvm" -> "clang object code"

// // clang compilation of C code
// "clang compiler" [ label="Clang compiler" ]
// "clang AST" [ shape=box ]
// "scan-build" -> "clang compiler"
// "clang frontend" [ label="Clang frontend" ]
// "clang frontend" -> "c code" [ dir=back ]
// //"clang frontend" -> "clang AST"
// "clang AST" -> "clang frontend" [ dir=back ]
// "clang compiler" -> "clang frontend"
// "clang compiler" -> "clang AST"  [ dir=back ]
// "clang compiler" -> "llvm"

// // clang++ compilation of C++ code
// "clang++ compiler" [ label="Clang++ compiler" ]
// "scan-build" -> "clang++ compiler"
// "clang++ frontend" [ label="Clang++ frontend" ]
// "clang++ frontend" -> "cpp code" [ dir=back ]
// "clang AST" -> "clang++ frontend" [ dir=back ]
// "clang++ compiler" -> "clang++ frontend"
// "clang++ compiler" -> "clang AST"  [ dir=back ]
// "clang++ compiler" -> "llvm"

// // clang analysis
// "clang analysis results" [ shape="box" ]
// "scan-build" -> "clang static analyzer"
// "clang static analyzer" -> "clang checkers"
// "clang checkers" -> "clang analysis results"
// "clang checkers" -> "clang AST" [ dir=back ]

// // clang C code analysis
// "clang static analyzer" -> "clang frontend"

// // clang C++ code analysis
// "clang static analyzer" -> "clang++ frontend"

// // callers analysis
// "metadata json file" [ label="Callers metadata\njson files" ]
// "metadata json file" [ shape="box", color=blue ]

// // callers C code analysis
// "callers frontend" [ color=blue, label="Callers frontend\n(C++)" ]
// "callers frontend" -> "clang frontend" [ color=blue ]
// "callers frontend" -> "clang AST" [ dir=back, color=blue ]
// "callers frontend" -> "metadata json file" [ color=blue ]

// // callers C++ code analysis
// "callers++ frontend" [ color=blue, label="Callers++ frontend\n(C++)" ]
// "callers++ frontend" -> "clang++ frontend" [ color=blue ]
// "callers++ frontend" -> "clang AST" [ dir=back, color=blue ]
// "callers++ frontend" -> "metadata json file" [ color=blue ]

// // callers backends
// "analysis goals" [ label="analysis goals", shape=box, color=blue ]
// "user config" [ label="user analysis\nbash script", shape=box, color=blue ]
// "analysis goals" -> "user config" [ style=dashed, label=manual, color=blue ]
// "analysis goals" -> "function callgraphs" [ style=dashed, label="manual", dir=back, color=blue ]
// "function callgraphs" [ label="function callgraphs\n.dot files", shape=box, color=blue ]
// "callers backends" [ label="Callers backends\n(OCAML)", color="blue" ]
// "metadata json file" -> "callers backends" [ color=blue ]
// "user config" -> "callers backends" [ color=blue ]
// "callers backends" -> "function callgraphs" [ color=blue ]

// // frama-c++
// "scan-callers" -> "frama-c++" [ color=blue ]
// "frama-c++" [ label="frama-c++", color=blue ]
// "frama-c++" -> "clang++ frontend" [ color=blue ]
// "frama-c++" -> "framaCIRGen" [ color=blue ]
// "frama-c++" -> "frama-clang" [ color=blue ]

// // frama-clang analysis
// //"scan-callers" -> "frama-clang"
// "cmake-callers" -> "frama-clang" [ color=blue ]
// "frama-clang" [ label="frama-clang\n(OCAML)", color=blue ]
// "framaCIRGen" [ label="framaCIRGen\n(C++)", color=blue ]
// //"fir" [ label="Frama-C Intermediate\nRepresentation", shape=box ]
// "fir" [ label="Frama-C IR", shape=box, color=blue ]
// "cabs" [ label = "C Abstract", shape=box, color=blue ]
// //"cil" [ label = "C Intermediate Language" ]
// "cil" [ label = "CIL", shape=box ]

// "clang AST" -> "framaCIRGen" [ color=blue ]
// //"framaCIRGen" -> "fir"
// "fir" -> "framaCIRGen" [ dir=back, color=blue ]
// "fir" -> "frama-clang" [ color=blue ]
// "frama-clang" -> "cabs" [ color=blue ]
// //"cabs" -> "frama-clang" [ dir=back, color=blue ]
// "cabs" -> "frama-c" [ color=blue ]
// //"cabs" -> "frama-c" [ dir=back ]

// security analysis plugins
"security analysis results" [ label="security analysis results" color=blue shape=box ]
"fc security plugins" [ label="STANCE frama-c\nsecurity plugins", color=blue ]
"fc security plugins" -> "frama-c" [ dir=back, color=blue ]
"fc security plugins" -> "VA results" [ dir=back, color=blue ]
"security analysis results" -> "fc security plugins" [ dir=back, color=blue ]

// frama-c value analysis
"VA results" [ shape=box ]
"VA" [ label="Value Analysis" ]
"VA results" [ label="VA results" ]
"VA" -> "frama-c" [ dir=back ]
//"VA" -> "VA results"
"VA results" -> "VA" [ dir=back ]
"VA" -> "cil" [ dir=back ]

// frama-c analysis
"c code" [ label="C code", shape="box" ]
"pp C code" [ shape=box ]
"frama-c" [ label="frama-c" ]
"frama-c" -> "c code" [ dir=back ]
//"c code" -> "frama-c"
"cil" -> "frama-c"
"cil" -> "frama-c" [ dir=back ]
//"frama-c" -> "pretty-printed c code" [ label="print" ]
"frama-c" -> "pp C code" [ label="print" ]
//"frama-c" -> "c code" [ label="print" ]

// user analysis goals & config
"analysis goals" [ label="security analysis goals", shape=box ]
"user config" [ label="user config", shape=box ]
"analysis goals" -> "user config" [ style=dashed, label=manual ]
"user config" -> "frama-c" [ style=dashed, label=manual ]
"analysis goals" -> "security analysis results" [ style=dashed, label="manual", dir=back ]
"analysis goals" -> "VA results" [ style=dashed, label="manual", dir=back ]

}

// Local Variables:
// compile-command: "dot -Tpng analysis.frama-c.security.gen.dot > analysis.frama-c.security.gen.png"
// End:
 
   #+END_SRC
**** preprocess dot files					    :dot2png:
     #+BEGIN_SRC bash :tangle dot2png.gen.sh
#!/bin/bash
for d in `ls *.gen.dot`
do
dot -Tpng $d > $d.png
#dot -Tpng $d > $d.png 2> $d.stderr
done
     #+END_SRC
**** clean work directory					      :clean:
     #+BEGIN_SRC bash :tangle clean.gen.sh
#!/bin/bash
rm -f *.gen.*
     #+END_SRC
*** TODO usage of other plug-ins
*** TODO special requirements such as libraries or external tools, etc.
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* Implementation
   TBC
   #+END_SRC
** TODO Example [0/1]
   - [ ] Illustrate the functioning of the plug-in through a small example (source code, steps to analyse it, results and interpretation of results).
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* Example
   TBC
   #+END_SRC
** TODO Requirements and availability [0/2]
   Describe
   1. [ ] the requirements for compiling, installing and using the plug-in
   2. [ ] the location (URL) where it can be downloaded with its documentation and 3) the support (versions of Frama-C supported, plans for future support, integration into Frama-C distro, etc.)
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* Requirements and availability
   TBC
   #+END_SRC
** TODO References [0/1]
   - [ ] Add some references
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* References
  The clang/LLVM online documentation is available at url http://clang.llvm.org.
   #+END_SRC
