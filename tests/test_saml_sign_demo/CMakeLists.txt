# File generated by test_saml_sign.launch.sh
# content manually adapted after a first generation by Callers's cmake_init.sh

cmake_minimum_required(VERSION 2.8)

# generate list of source files with related compilation command
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# add debug symbols
set(CMAKE_BUILD_TYPE Debug)

# option to activate the XSW countermeasure
option(XSW_COUNTERMEASURE "Option to activate the XSW countermeasure" ON)

# option to use the system library libxml2-dev
option(SYSTEM_LIB "Use the system library libxml2" OFF)

# option to use a manual installed library libxml2-dev
option(DEV_LIB "Use the manual installed library libxml2" ON)

# option to build the integration test
option(INTG_TEST "Build the integration test" OFF)

# option to build the unitary test
option(UNIT_TEST "Build the unitary test" ON)

# option to use a wellformed call context
option(ADAPTED_CALL_CONTEXT "Use a wellformed call context" ON)

# option to set the XML_MEM_TRACE environment variable
option(USE_XML_MEM_TRACE "Option to set the XML_MEM_TRACE environment variable" ON)

# option to set the XML_MEM_BREAKPOINT environment variable
option(USE_XML_MEM_BREAKPOINT "Option to set the XML_MEM_BREAKPOINT environment variable" ON)

# option to activate Frama-C analysis
option(FRAMA_C "Option to activate Frama-C VA analysis" OFF)

# option to widen Frama-C analysis
option(FRAMA_C_VA_WIDENING "Option to widen Frama-C VA analysis" )

# option to stub the libxml2 library
option(LIBXML2_STUB "Option to stub the libxml2 library" OFF)

# save temporary files when needed
option(SAVE_TEMPS "Save temporary files" ON)

configure_file (
  "validate_saml_sign.h.in"
  "../validate_saml_sign.h"
  )

if(SAVE_TEMPS)
  set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -save-temps " )
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -save-temps " )
endif()

if(FRAMA_C)
  if(FRAMA_C_VA_WIDENING)
    set(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS}   -C -DFRAMA_C -DFRAMA_C_VA_WIDENING -D__FC_MACHDEP_X86_64") # -DFRAMA_C_MALLOC_INDIVIDUAL")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -C -DFRAMA_C -DFRAMA_C_VA_WIDENING -D__FC_MACHDEP_X86_64") # -DFRAMA_C_MALLOC_INDIVIDUAL")
  else()
    set(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS}   -C -DFRAMA_C -D__FC_MACHDEP_X86_64") # -DFRAMA_C_MALLOC_INDIVIDUAL")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -C -DFRAMA_C -D__FC_MACHDEP_X86_64") # -DFRAMA_C_MALLOC_INDIVIDUAL")
  endif()
endif()

# add subdirectories when needed
#add_subdirectory(data)

# add path to header files
#include_directories(".")
if(FRAMA_C)
  include_directories(/tools/exec/share/frama-c/libc)
endif()
if(DEV_LIB)
  include_directories(/tools/exec/include/libxml2)
endif()
if(SYSTEM_LIB)
  include_directories(/usr/include/libxml2)
endif()
if(LIBXML2_STUB)
  include_directories(/tools/exec/include/libxml2)
endif()

# define the build target depending on the configuration

if(LIBXML2_STUB)
  # add_executable(xsw_test_saml_sign validate_saml_sign.c libxml2_empty_stub.c test_saml_sign.ut.c)
  # add_executable(xsw_test_saml_sign validate_saml_sign.c libxml2_stub.c test_saml_sign.ut.c)
  add_executable(
    xsw_test_saml_sign
    validate_saml_sign.c
    stub/buf.c
    stub/catalog.c
    stub/dict.c
    stub/entities.c
    stub/error.c
    stub/globals.c
    stub/hash.c
    stub/list.c
    stub/parser.c
    stub/parserInternals.c
    stub/threads.c
    stub/tree.c
    stub/uri.c
    stub/valid.c
    stub/xmlmemory.c
    stub/xmlstring.c
    stub/SAX.c
    stub/SAX2.c
    stub/setgetenv.c
    test_saml_sign.ut.c)
elseif(FRAMA_C)
  if(INTG_TEST)
    add_executable(xsw_test_saml_sign parse_saml_response.c validate_saml_sign.c libc/setgetenv.c test_saml_sign.ut.c)
  elseif(UNIT_TEST)
    add_executable(xsw_test_saml_sign validate_saml_sign.c libc/setgetenv.c test_saml_sign.ut.c)
  endif()
else()
  if(INTG_TEST)
    add_executable(xsw_test_saml_sign parse_saml_response.c validate_saml_sign.c test_saml_sign.ut.c)
  elseif(UNIT_TEST)
    add_executable(xsw_test_saml_sign validate_saml_sign.c test_saml_sign.ut.c)
  endif()
endif()

# add path to external libraries
if (LIBXML2_STUB)
else()
  if(DEV_LIB)
    target_link_libraries(xsw_test_saml_sign /tools/exec/lib/libxml2.a)
  endif()
  if(SYSTEM_LIB)
    target_link_libraries(xsw_test_saml_sign /usr/lib/x86_64-linux-gnu/libxml2.so)
  endif()
endif()

