#+AUTHOR Hugues Balp
#+TITLE The Callers plug-in

* TODO The Callers plug-in [2/7]
  :PROPERTIES:
  :author:   Hugues Balp
  :partner:  Thales Communications & Security
  :version:  0.1
  :END:
** Header
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
#+AUTHOR Hugues Balp
#+TITLE The Callers plug-in
The Callers plug-in
   #+END_SRC
** DONE Introduction/Executive Summary [1/1]
   - [X] Introduce the plugin
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
   Callers is a static analysis plugin extending the clang/LLVM compilation framework for enabling early syntactic-based security analysis on large-scale C/C++ software.
   #+END_SRC
** DONE Aims [1/1]
   - [X] Describe the objectives of the plug-in and its relation with the security analysis of source code (what security properties are analysed)   
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* Aim
   The initial goal of the Callers plugin is to enable early security risks assessments based on the analysis of function calls dependencies.

   This plugin is extensible and it could also be completed in the future to support other types of dependencies like:
   - data type dependencies (inheritence, composition...)
   - control-flow dependencies (behavioral analysis based on sequence diagram generation)
   - use of shared variables
   - use of vulnerable system calls (related to specific CVEs)

   The main idea behind the Callers plugin is to perform some kind of global static link edition of the whole software
   in order to be able to capture all the possible execution paths of the software and the different usage contexts of each function.

   Based on this information, the tool can generate different instances of function callgraphs, depending on the end-user analysis focus.
   Those callgraphs can then been further exploited to enable the verification of some global security properties on the software.
   #+END_SRC
** TODO Functioning and user interface [0/1]
   - [ ] Describe the main functions of the plug-in and its user interface, if any.
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* Functioning and user interface
   TBC
   Function call dependencies can be analyzed at different granularity levels (function, file, directory, libraries, application).
   #+END_SRC
** TODO Implementation [0/3]
   Describe the internals of the plug-in
*** TODO architecture of the plugin
    #+BEGIN_SRC dot :tangle callers.frontend.internals.gen.dot
digraph "Callers integration with Clang/LLVM " {

"scan-build" [ label="scan-build" ]
"cmake-callers" [ label="cmake-callers" ]

// entry points
"src code" [ label="user src code", shape="box" ]
"user build" [ label="custom build\n(autoconf, cmake..)" ]
"user compiler" [ label="user compiler\n(gcc, g++,clang..)" ]
"user build" -> "user compiler"
"user compiler" -> "src code" [ dir=back ]

// user compilation
"user object code" [ shape="box" ]
"scan-build" -> "user build"
"user compiler" -> "user object code"

// cmake build
"cmake-callers" -> "cmake build"
"cmake build" -> "user compiler"

// cmake callers analysis
"cmake-callers" -> "Callers frontend"

// clang compilation
"Clang object code" [ shape="box" ]
"LLVM Optimizer & Code Generator" [ label="LLVM Optimizer\n& Code Generator" ]
"scan-build" -> "Clang Compiler"
"Clang Compiler" -> "src code"  [ dir=back ]
"Clang Compiler" -> "LLVM Optimizer & Code Generator"
"LLVM Optimizer & Code Generator" -> "Clang object code"

// clang analysis
"Clang analysis results" [ shape="box" ]
"scan-build" -> "Clang Static Analyzer"
"Clang Static Analyzer" -> "src code"  [ dir=back ]
//"Clang Static Analyzer" -> "LLVM Optimizer\n& Code Generator"
"Clang Static Analyzer" -> "Clang Checkers"
"Clang Checkers" -> "Clang analysis results"
//"Clang Static Analyzer" -> "Clang Compiler"

// callers analysis
"metadata json file" [ label="Callers metadata\njson file" ]
"metadata json file" [ shape="box" ]
"scan-build" -> "Callers frontend"
"Callers frontend" -> "src code"  [ dir=back ]
"Callers frontend" -> "metadata json file"
}

// Local Variables:
// compile-command: "dot -Tpng callers.frontend.internals.gen.dot > callers.frontend.internals.gen.png"
// End:
    #+END_SRC
*** TODO usage of other plug-ins
*** TODO special requirements such as libraries or external tools, etc.
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* Implementation
   TBC
   #+END_SRC
** TODO Example [0/1]
   - [ ] Illustrate the functioning of the plug-in through a small example (source code, steps to analyse it, results and interpretation of results).
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* Example
   TBC
   #+END_SRC
** TODO Requirements and availability [0/2]
   Describe
   1. [ ] the requirements for compiling, installing and using the plug-in
   2. [ ] the location (URL) where it can be downloaded with its documentation and 3) the support (versions of Frama-C supported, plans for future support, integration into Frama-C distro, etc.)
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* Requirements and availability
   TBC
   #+END_SRC
** TODO References [0/1]
   - [ ] Add some references
   #+BEGIN_SRC org :tangle callers.chap6.tcs.D4.2.2.gen.org
* References
  The clang/LLVM online documentation is available at url http://clang.llvm.org.
   #+END_SRC
