# @author: Hugues Balp
# Please tangle this file and look at the usage sections

* prepare demo							:preparation:
** Usage of script prepare_demo.gen.sh				      :usage:

    #+BEGIN_SRC sh :shebang "#!/bin/bash" :results verbatim # C-c C-v C-e
source ./prepare_demo.gen.sh
usage_prepare_demo
    #+END_SRC

    #+RESULTS:
    #+begin_example
    usage_prepare_demo usage:
    either:

      build all config with: 
	 > prepare_all_tests
    or 
      choose among the following configurations:

      1. Integration tests with or without countermeasure (with libxml2):
	 > prepare_it_with_system_lib && execute_it_with_system_lib

      2. Unit tests with or without countermeasure:
	 > prepare_ut_with_gdb &&
	 > execute_ut_without_xsw_countermeasure && 
	 > execute_ut_with_xsw_countermeasure ||
	 > debug_ut_with_xsw_countermeasure

      3. Callers analysis with or without libxml2:
	 > prepare_callers_without_libxml2
	 > prepare_callers_without_libxml2

      4. Frama-c Value Analysis:
	 > prepare_fc_va ||
	 > update_fc_va
#+end_example

   #+BEGIN_SRC sh :shebang "#!/bin/bash" tangle :tangle prepare_demo.gen.sh
function usage_prepare_demo()
{
    cat > /dev/stdout <<EOF

usage_prepare_demo usage:
either:

  build all config with: 
     > prepare_all_tests
or 
  choose among the following configurations:

  1. Integration tests with or without countermeasure (with libxml2):
     > prepare_it_with_system_lib && execute_it_with_system_lib

  2. Unit tests with or without countermeasure:
     > prepare_ut_with_gdb &&
     > execute_ut_without_xsw_countermeasure && 
     > execute_ut_with_xsw_countermeasure ||
     > debug_ut_with_xsw_countermeasure

  3. Callers analysis with or without libxml2:
     > prepare_callers_with_libxml2
     > prepare_callers_without_libxml2

  4. Frama-c Value Analysis:
     > prepare_fc_va ||
     > update_fc_va
EOF
}
   #+END_SRC

** Loading of the required scripts				     :script:
*** Load of script libxml2_install.sh				       :load:

   #+BEGIN_SRC sh :shebang "#!/bin/bash" tangle :tangle prepare_demo.gen.sh
source libxml2_install.sh
   #+END_SRC

*** Usage of script libxml2_install.sh				      :usage:

    #+BEGIN_SRC sh :shebang "#!/bin/bash" :results verbatim # C-c C-v C-e
source ./libxml2_install.sh
usage_libxml2_install
    #+END_SRC

    #+RESULTS:
    #+begin_example
    Usage of script libxml2_install.sh
    5 features:
    1) System install of libxml2:
       > libxml2_workflow_system_install
    2) Source install of libxml2:
       > libxml2_workflow_sources_gdb <git|local>
    3) Source Callers analysis of libxml2:
       > libxml2_workflow_sources_callers <git|local>
    4) Frama-C builtin preprocessing of libxml2:
       > libxml2_workflow_fc_va <git|local>
    5) Frama-C update preprocessing of libxml2:
       > libxml2_update_fc_preproc
#+end_example

*** Load of script test_saml_sign.launch.sh			       :load:

   #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh
source test_saml_sign.launch.sh
   #+END_SRC

*** Usage of script test_saml_sign.launch.sh			      :usage:

   #+BEGIN_SRC sh :shebang "#!/bin/bash" :results verbatim # C-c C-v C-e
source ./test_saml_sign.launch.sh
usage_test_saml_sign_launch
   #+END_SRC

   #+RESULTS:
   : test_saml_sign usage:
   : either:
   :   build all config with: cmake_build_all
   : or:
   :   1: cmake_config_common
   :   2: choose one of the cmake_config_* function
   :   3: call script cmake_build_execute to generate and build the config
   :   with the appropriate generated cmake file CMakeLists.txt

** Build and installation of all tests and configuration of Frama-C Value Analysis

   #+BEGIN_SRC sh :shebang "#!/bin/bash" tangle :tangle prepare_demo.gen.sh   
function prepare_all_tests()
{
  cmake_build_all
}
   #+END_SRC

** Separate build and tests						 :it:
*** System install of libxml2 without debug symbols

    #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh   
function prepare_it_with_system_lib()
{
    # To install the libxml2 system library
    libxml2_workflow_system_install

    # To build the unitary test
    cmake_config_common

    cmake_config_it_gdb_lib-sys_with_xsw_countermeasure
    cmake_build_execute

    cmake_config_it_gdb_lib-sys_without_xsw_countermeasure
    cmake_build_execute
}
    #+END_SRC

*** To execute the unitary test

    #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh   
function execute_it_with_system_lib()
{
    # ... without the xsw countermeasure
    ./test_it_gdb_lib-sys_without_xsw_countermeasure.gen/xsw_test_saml_sign data/SAMLResponse.malicious_xsw.xml
    ./test_it_gdb_lib-sys_without_xsw_countermeasure.gen/xsw_test_saml_sign data/SAMLResponse.malicious_xsw.xml

    # ... with the xsw countermeasure
    ./test_it_gdb_lib-sys_with_xsw_countermeasure.gen/xsw_test_saml_sign data/SAMLResponse.sane_xsw.xml
    ./test_it_gdb_lib-sys_with_xsw_countermeasure.gen/xsw_test_saml_sign data/SAMLResponse.malicious_xsw.xml

    # To check potential memory vulnerabilities with valgrind
    valgrind ./test_it_gdb_lib-sys.gen/xsw_test_saml_sign data/SAMLResponse.malicious_xsw.xml

    # To get the execution path with valgrind
    valgrind --tool=callgrind ./test_it_gdb_lib-sys.gen/xsw_test_saml_sign data/SAMLResponse.malicious_xsw.xml
    kcachegrind callgrind.out.* &
}
    #+END_SRC

** Build and Debug with gdb					     :gdb:ut:

   #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh   
function prepare_ut_with_gdb()
{
   # To build, fine tune configuration and install the libxml2 library without optimization and with debugging symbols
   libxml2_workflow_sources_gdb local

   # To build the unitary test
   cmake_config_common

   cmake_config_ut_gdb_lib-dev_without_xsw_countermeasure
   cmake_build_execute

   cmake_config_ut_gdb_lib-dev_with_xsw_countermeasure
   cmake_build_execute
}
   #+END_SRC

   #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh
function execute_ut_without_xsw_countermeasure()
{
   # To execute the unitary test
   ./test_ut_gdb_lib-dev_without_xsw_countermeasure.gen/xsw_test_saml_sign
}
   #+END_SRC

   #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh
function execute_ut_with_xsw_countermeasure()
{
   ./test_ut_gdb_lib-dev_with_xsw_countermeasure.gen/xsw_test_saml_sign
}
   #+END_SRC

   #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh
function debug_ut_with_xsw_countermeasure()
{
   # To debug the unitary test with gdb
   gdb --args ./test_ut_gdb_lib-dev_with_xsw_countermeasure.gen/xsw_test_saml_sign
}
   #+END_SRC

** Callers Analysis						    :callers:

   #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh   
function prepare_callers_without_libxml2()
{
   cmake_build_all_callers_without_libxml2
}
   #+END_SRC

   #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh   
function prepare_callers_with_libxml2()
{
   cmake_build_all_callers_with_libxml2
}
   #+END_SRC

** Frama-C Value Analysis					  :framac:fc:

   # To modify some Frama-C VA parameters like the -slevel
   # edit the parameters values in script test_saml_sign.launch.sh
   emacs -nw test_saml_sign.launch.sh

   #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh
function prepare_fc_va()
{
   # To Launch Frama-C Value Analysis on the unitary test
   # source test_saml_sign.launch.sh

   # and then call to install and preprocess the sources of the libxml2 library
   libxml2_workflow_fc_va local

   # frama-c Value Analysis
   fc_parse_prepare

   # after successfull analysis completion, look at the results on the frama-c gui
   frama-c-gui -load fc_analyzed.gen.sav &
}
   #+END_SRC

   In case you need to edit some source files of the library,
   you should then update the preprocessing of libxml2 as follows:

   #+BEGIN_SRC sh tangle :tangle prepare_demo.gen.sh
function update_fc_va()
{
   libxml2_update_fc_preproc
}
   #+END_SRC

* demo								       :demo:
  :PROPERTIES:
  :LOCATION: [[./demo.org][./demo.org]]
  :END:
  
