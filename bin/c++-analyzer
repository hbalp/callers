#!/bin/bash
#set -x

#$include "shared-utilities"
#$include /tools/llvm/trunk/tools/clang/tools/extra/callers/bin/shared-utilities

function exit_script()
{
    lastArg=${!#}
    args=$@
    echo "CPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCP"
    echo "c++-analyzer: last provided argument is ${lastArg} while expecting a filename, so we exit without executing any callers analysis"
    echo "ignored arguments are: $@"
    echo "WARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWARNINGWAR"
    #exit 255
    exit 0
}

function is_option()
{
    id=$1
    if [ ${id:0:1} == "-" ]
    then
	#echo "id: ${id} is an option"
	return 0
    else
	#echo "id: ${id} is not an option"
	return 1
    fi
}

function has_extension()
{
    file=$1
    ext=$2
    bname=`basename $file`
    fname=`basename $file $ext`
    if [ $fname == $bname ]
    then
	#echo "ext of file ${file} is not ${ext}"
	return 1
    else
	#echo "ext of file ${file} is ${ext}"
	return 0
    fi
}

function get_file()
{
    file_ext=$1
    shift 1
    args=$@
    #echo "file_ext: ${file_ext}"
    #echo "args: ${args}"
    for a in $args
    do
	#echo "check whether ${a} is an option:"
	is_option ${a}
	is_opt=$?
	if [ $is_opt -eq 1 ]
	then
	    #echo "check whether ${a} is a file with ext=${file_ext}:"
	    has_extension ${a} ${file_ext}
	    has_ext=$?
	    if [ $has_ext -eq 0 ]
	    then
	        #echo "file of ext ${file_ext} is ${a}"
		echo "${a}"
		return 0
	    fi
	fi
    done
    #echo "No file of ext ${file_ext} has been found in $@"
    return 1
}

function build_conftest()
{
    file=${!#}
    args=$@
    echo "CPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCP"
    echo "c++-analyzer: last provided argument is ${file}, so we compile it without analysis"
    #echo "CXX=${CXX} $@"
    echo "g++ $@"
    g++ "$@"
    #clang "$@"
    #$CXX "$@"
    echo "CONFTESTCONFTESTCONFTESTCONFTESTCONFTESTCONFTESTCONFTESTCONFTESTCONFTESTCONFTEST"
    exit 0
}

# function check_ld()
# {
#     lastArg=${!#}
#     args=$@
#     echo "CPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCP"
#     echo "c++-analyzer: last provided argument is ${lastArg}, so we provide a dummy ld"
#     echo "ld: $@"
#     export LD=/usr/bin/ld
#     echo "LDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLD"
#     exit 0
# }

# function check_args()
# {
#     lastArg=${!#}

#     if
# 	[ $lastArg == "conftest.cpp" ]
#     then
# 	build_conftest $@
#     elif
# 	[ $lastArg == "-print-prog-name=ld" ]
#     then
# 	check_ld $@
#     elif
# 	[ $lastArg == "-V" ]||
# 	[ $lastArg == "-v" ]||
# 	[ $lastArg == "-qversion" ]
#     then
# 	exit_script $@
#     fi
# }

# check expected arguments
#check_args $@
#lastArg=${!#}

echo "CPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCP"

# get the absolute path to the first source file to be analyzed
#file=$lastArg
build_args=$@
#analysis_args=echo "${build_args}" | sed -e s/\\.o/\.gen\.callers\.unsorted\.out/g
analysis_args=$@
file=`get_file .cpp ${analysis_args}`
echo "c++-analyzer arguments are: $@"

if [ -z "${file}" ]
then
    echo "No .cpp source file has been found in arguments, so we bypass the callers analysis"
    exit_script ${analysis_args}
fi

bfile=`basename $file`

if [ ${bfile} == "conftest.cpp" ]
then
    build_conftest ${analysis_args}
fi

echo "cpp_file: ${file}"

# localize clang
clang=`which clang`

# get build options
build_options=${build_args}

# build the source file to enable link edition and to be sure output directories are well created 
${clang} ${build_options}

# retrieve the system include files required by clang
system_includes=`strace -f -e verbose=all -s 256 -v ${clang} -std=c++11 $file |& grep execve |& grep "bin/clang" |& grep cc1 |& sed -e s/'"-internal-isystem", "'/'-I"'/g|& sed -e s/'"-internal-externc-isystem", "'/'-I"'/g |& sed -e s/", "/"\n"/g |& grep "\-I\"" | sed -e s/\"//g | awk '{print}' ORS=' ' `
# get path
path=`pwd`

#################################################################################
#       Launch Callers analysis
#################################################################################

# define callers analysis options
callers_analysis_options=`echo ${build_options} | sed -e s/-c\ //g | sed -e s/\\\\.o/\.callers.unsorted.out/g`
#callers_analysis_options=`echo ${build_options} | sed -e s/-c\ //g | sed -e s/\\\\.o/\.out\ /g | sed -e s#${file}#${path}/${file}#g `
#| sed -e s#-o\ CMakeFiles[^\ ]*/#-o\ callers-analysis-report/dot/unsorted/#g >> $callers_launch_script

# localize callers
callers=`which callers++`

# add some options when required
callers_options="-std=c++11"

# build the callers analysis command    
analysis="${callers} ${callers_options} ${system_includes} ${callers_analysis_options}"

cd $path
echo "launch callers analysis of file ${file}..."
echo "working directory is $PWD"
echo "${analysis}" | tee .tmp.last.callers.analysis.sh
source .tmp.last.callers.analysis.sh
if [ $? -ne 0 ]; then
    echo "################################################################################"
    echo "# Scan-Callers analysis error. Stop here !"
    echo "################################################################################"
    exit -1
fi

#exec "${analysis}"
#exec "cd ${path} && ${analysis}"

#################################################################################
#       Launch framaCIRGen analysis
#################################################################################

# define framaCIRGen analysis options
framaCIRGen_analysis_options=`echo ${build_options} | sed -e s/-c\ //g | sed -e s/\\\\.o\ /\.gen.fir\ /g `

# localize framaCIRGen
framaCIRGen=`which framaCIRGen`

# add some options when required
framaCIRGen_options=""

# build the framaCIRGen analysis command    
analysis="${framaCIRGen} ${framaCIRGen_options} ${system_includes} ${framaCIRGen_analysis_options}"

cd $path
echo "launch framaCIRGen analysis of file ${file}..."
echo "working directory is $PWD"
echo "${analysis}" | tee .tmp.last.framaCIRGen.analysis.sh
source .tmp.last.framaCIRGen.analysis.sh
#exec "${analysis}"
#exec "cd ${path} && ${analysis}"

#################################################################################
#       Launch frama-clang analysis
#################################################################################

# define frama-clang analysis options
frama_clang_analysis_options=`echo ${build_options} | sed -e s/-c\ //g | sed -e s/-o\ /\>\ /g | sed -e s/\\.o\ /\.gen.cabs.c\ /g | awk '{ print $3 " " $1 " " $2 }'`
#frama_clang_analysis_options=`echo ${build_options} | sed -e s/-c\ //g | sed -e s/-o\ /\>\ /g | sed -e s/\\.o\ /\.gen.cabs.c\ /g | awk '{ print $1 " :a: " $2 " :b: " $3 " :c: " $4 " :d: " $5 " :e: " $6 " :f: " $9 " :g: " $7 " :h: " $8 }'`

# localize frama_clang
frama_clang=`which frama-c`

# add some options when required
frama_clang_options="-cxx-nostdinc -cxx-keep-mangling -fclang-msg-key clang,cabs -fclang-verbose 2 -cxx-clang-command"

# build the frama_clang analysis command
analysis="${frama_clang} ${frama_clang_options} \"framaCIRGen \${system_includes}\" -machdep x86_32 -print ${frama_clang_analysis_options}"
#analysis="${frama_clang} ${frama_clang_options} \"framaCIRGen \${system_includes}\" -machdep x86_32 -print 1: ${frama_clang_analysis_options} 2: ${frama_clang_analysis_options2} 3: ${frama_clang_analysis_options3}"

cd $path
echo "launch frama_clang analysis of file ${file}..."
echo "working directory is $PWD"
echo "${analysis}" | tee .tmp.last.frama_clang.analysis.sh
source .tmp.last.frama_clang.analysis.sh
#exec "${analysis}"
#exec "cd ${path} && ${analysis}"

echo "CPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCPPCP"
